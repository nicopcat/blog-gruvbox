<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nic Tian</title>
    <link>http://blog.nekolas.cafe/</link>
    <description>Recent content in Posts on Nic Tian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Nov 2021 22:13:01 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于我</title>
      <link>http://blog.nekolas.cafe/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.nekolas.cafe/about/</guid>
      <description>Nic Tian 👇 😺
嗨，我是小田。
Homepage: https://nekolas.cafe/
简单介绍 属猫。 咖啡爱好者。
表面乖巧平和但内心暗自不守规矩。
喜欢音乐，读书，看电影，打游戏，业余 gourmet。
感兴趣的方向是 Web 前端，喜欢好看的设计。
爱 J小将，养有一只猫，叫打咩。
总觉得很难介绍自己，因为我也只是了解一部分的自己。
关于语言 喜欢语言学习，会讲中文、英语和一些日语。
友链 JaneW喜欢画画的Jane Bore&amp;#39;s Notes博观而约取，厚积而薄发。 Sulv’s Blog一个记录技术、阅读、生活的博客 IILeeのBlog所以，看不到光，算是不幸吗？需要光才是真正的不幸吧。 Seviche.ccCode / Tech / Live a Random Life OneDay一个追求天天进步的程序猿 交换 template 你的名字: &amp;#34;Nekolas&amp;#39;s blog&amp;#34;, 一栏地址: &amp;#34;https://blog.</description>
    </item>
    
    <item>
      <title>codewars练习</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/codewars/</link>
      <pubDate>Sat, 21 May 2022 14:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/codewars/</guid>
      <description>开个帖子记录一下解题和方法。
Break camelCase Details
 Complete the solution so that the function will break up camel casing, using a space between words.
 Example
&amp;quot;camelCasing&amp;quot; =&amp;gt; &amp;quot;camel Casing&amp;quot;&amp;quot;identifier&amp;quot; =&amp;gt; &amp;quot;identifier&amp;quot;&amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;quot;学到的 新知识
 正则表达式的 $1 - $9 正则表达式之先行断言 str.replace()的参数  复习
 replace() charCodeAt()  my solution 思路：用正则拿到大写，再用split(..)以大写字母为界切开，然后在头部加上大写字母，然后拼接在一起。
使用的方法: 正则 match(/[A-Z]/g), split, slice, concat, join, push &amp;hellip;
我真的想得太复杂了
function breakCamel(words) { if (words === &amp;#34;&amp;#34;) { return &amp;#39;&amp;#39; } else { // 得出这组字符串中大写字母 []  let uppercase = words.</description>
    </item>
    
    <item>
      <title>力扣 oh Leetcode</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/my-miserable-leetcode/</link>
      <pubDate>Wed, 18 May 2022 11:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/my-miserable-leetcode/</guid>
      <description>作为一个准前端开发者，我天真地以为不用看力扣，你只是个切图仔。但感受到各方各界的暗示：你得看，你得看看。
好吧，其实是快要机考了。
从网上搜的机考真题来看，貌似是3道算法题，难度也许在力扣简单-中等之间。对于一个月前才知道 codewars 这个可爱网站的我来说，不啻晴天霹雳，于是我跑到力扣大概看了几道简单的题目。
第一题很“简单”，只用一个了一个JS的方法就可以计算出来。查看他人的解题，发现大家的思路很不一样，甚至很陌生。这些新奇的思路（不用库）大概就是传说中的算法吧。
啊，算法，犹如哥伦布一脚踏进美洲，还以为是另一个印度呢。
 已了解/未了解：  二分算法 哈希算法 滑动窗口 左右双指针   题目： 判断str是否为回文字符串 来自牛客网 左右双指针：
function judge(str) { let left = 0; let right = str.length - 1; if (str.length === 0) return false; while (left &amp;lt;= right) { if (str[left] !== str[right]) { return false } else { left++; right--; } } return true; } 循环：
function judge(str) { for (let i = 0; i &amp;lt; Math.</description>
    </item>
    
    <item>
      <title>JavaScript 中 this 的绑定</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/this-and-context/</link>
      <pubDate>Fri, 13 May 2022 22:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/this-and-context/</guid>
      <description>this会在执行的上下文中绑定一个对象，有时候绑定全局对象，有时绑定的是某个对象，所以在什么情况下进行什么绑定，比较迷惑。
先说结论：this的绑定取决于函数的直接调用位置。
1. 调用位置 首先要理解什么是调用位置：调用位置就是函数在代码中调用的位置，而不是函数声明的位置。
function foo{ console.log(&amp;#39;foo&amp;#39;); bar(); // &amp;lt;-- bar()的调用位置 } function bar{ console.log(&amp;#39;bar&amp;#39;); baz(); // &amp;lt;-- baz()的调用位置 } function baz{ console.log(&amp;#39;baz&amp;#39;); } foo(); // &amp;lt;-- foo()的调用位置 2. 绑定规则 判断this是如何绑定，首先找到函数的调用位置，然后对比下面的规则，看符合哪一条，且这些规则具有不同的优先级。
2.1 默认绑定 首先，最常用的函数调用类型是：独立函数调用。这条规则可以看作是不符合其他规则时的默认规则。
场景 1：独立函数的调用 因为this没有绑定到任何对象，所以默认绑定到全局。
function foo() { console.log(this.a); } const a = 2; foo(); // 2 场景 2：将函数作为参数传入另一个函数时 这样的绑定，本质上仍然是独立函数的调用。
function foo(fn) { fn(); } function bar() { console.log(this.a); // window } var a = 8; foo(bar); // 8 但，如果使用let和const，或是严格模式下，隐式绑定会丢失。</description>
    </item>
    
    <item>
      <title>如何使用 Netlify 快速部署个人项目</title>
      <link>http://blog.nekolas.cafe/posts/tech/posts/deploy-a-vue-cli-prj-w-netlify/</link>
      <pubDate>Sat, 30 Apr 2022 17:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/posts/deploy-a-vue-cli-prj-w-netlify/</guid>
      <description>一直耳闻 Netlify 非常好用，用过之后，我表示它确实很好用。
先进入 Netlify 官网，使用 Github 账号授权登陆。登陆完毕就看到一个大大的拖拽框，简直就是说“网页快快往我这放！”
不过我想托管的 demo 是用 Vue-cli 做的，没办法直接把文件丢进去，所以写这篇记录一下过程。
Netlify x Vue-cli 其实我也是照着官网的一篇文章做的，简单记录下步骤：
 将 Demo 源码放到 Github 的仓库中 登陆 Netlify，新建一个 site，选择刚刚创建的那个仓库 点击 Site settings⚙️，填写一下配置  Base directory: 可以空着 Build command: npm run build Publish directory: dist   点击 Deploy Site 发布 就这么简单！！  文章中还有 Nuxt, Gridsome, Domains 的相关的部署信息，有需求可以参考一下。
Other Netlify 服务提供一个免费的 Starter Plan，适合展示个人的、兴趣爱好和实验性的小项目，免费套餐包含：
 0 KB / 100 GB bandwidth 0 / 300 build minutes (Apr 29 to May 29)  总之，个人小项目可以放在这上面，访问量大的还是花点钱吧~</description>
    </item>
    
    <item>
      <title>波比跳</title>
      <link>http://blog.nekolas.cafe/posts/life/hiit-burpee/</link>
      <pubDate>Mon, 25 Apr 2022 17:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/hiit-burpee/</guid>
      <description> 快速波比跳 20 秒后，休息 10 秒 动作重复 8 组，合计 4 分钟 中间尽量不要停顿，效果会减半，所以尽量快速完成 动作非常累，刚开始一定无法在 4 分钟内完成 8 组 但是每天坚持锻炼，体力会显著改变，越来越顺利  但……如果有腰突 不太推荐康复不好的腰突患者做这样过于激烈的运动，除非腰椎力量已经恢复 发现康复师（?） Jeff 的视频对缓解腰突有帮助 我的理解是在通过腰部肌肉锻炼（小燕飞 + 不伤害腰部的运动）的基础上，再进行其他相对激烈的运动 总之，我还是悠着点   参考   波比跳 https://weibo.com/tv/show/1034:4422215412683017?from=old_pc_videoshow
  Jeff-如何解决腰间盘突出
https://www.bilibili.com/video/BV1zx41177WR
  </description>
    </item>
    
    <item>
      <title>如何优雅地用 JS 创建包含 0 ~ n 的整数数组</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/js-create-number-array/</link>
      <pubDate>Sat, 23 Apr 2022 15:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/js-create-number-array/</guid>
      <description>Codewar 上有一题非常简单的题：
 写一个函数，给任意一个正整数 n，求和。
 Example:
2 -&amp;gt; 1 + 2 // output: 35 -&amp;gt; 1 + 2 + 3 + 4 + 5 // output: 15【小学生解法】
先用小学就学过等差数列的累加计算公式“( 首项 + 末项 ) * 项数 / 2”计算一下:
2 -&amp;gt; (1+2)* 2/2 = 3 ✔5 -&amp;gt; (1+5)* 5/2 = 15 ✔本小学生做对了！
【用 for 循环】
也很容易想到的是用 for 循环解题：
function sum(n) { let sum = 0; for (i = 0; i &amp;lt;= n; i++) { sum += i; } return sum; }  其实像这种累加的题目，感觉非常适合用 reduce 来做，于是问题变成了如何快速创建一个 0~n 的数组？</description>
    </item>
    
    <item>
      <title>Tech Daily 001</title>
      <link>http://blog.nekolas.cafe/posts/tech/posts/tech-daily-001/</link>
      <pubDate>Fri, 22 Apr 2022 18:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/posts/tech-daily-001/</guid>
      <description>跟逛维基百科一样，前端用语一个接一个映入眼帘，了解完 A 又出现了 B, C, D……
Composition API Vue 3 重大新特性之一，中文“组合式 API”，Vue 2.x 使用的是 Option API。简单来说就是把一坨代码放到setup()函数里集中管理，解决业务关注点过多的问题。
查看大帅老猿花了一夜做的动画
pinia 大菠萝，全新的 Vue 状态管理库，相当于 vuex 5 版本。
特点  体积非常小 简化状态管理：砍掉了 vuex 中的 mutation，只剩下 state, getter 和 action 支持 TypeScript 非常适合 Vue 3 的 Composition API 适合管理小型单页应用程序   Nuxt.js 混合型开源的 vue 框架（框架的框架？）
 NuxtJS 让你构建你的下一个 Vue.js 应用程序变得更有信心。这是一个 开源 的框架，让 web 开发变得简单而强大。
 目前有 Nuxt 2，Nuxt Bridge 和 Nuxt 3 这几个版本，似乎还在开发中。
Pollyfill 由于各个浏览器/版本不统一，造成某些功能无法使用，pollyfill 相当于处理兼容性的工具。</description>
    </item>
    
    <item>
      <title>如何在vscode 启动调试工具</title>
      <link>http://blog.nekolas.cafe/posts/tech/posts/vscode-debugger/</link>
      <pubDate>Mon, 18 Apr 2022 16:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/posts/vscode-debugger/</guid>
      <description>除了浏览器里的 dev tool，非常牛逼的 VS Code 也内置了调试控制台，只需按照步骤配置 launch.json 文件即可。
步骤  打开代码文件夹 点右侧菜单栏的 运行和调试 或快捷键 Ctrl + Shift + D 点击 创建 launch.json 文件。VSCode 会在工作区的 .vscode 文件夹下生成一个新的 launch.json 文件 可以观察到，左侧有 lauch 菜单（一个类似播放的按钮），可以用此菜单启动服务器了。    参考：https://segmentfault.com/a/1190000022804681</description>
    </item>
    
    <item>
      <title>v-cloak: 隐藏未编译的raw template</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/v-cloak/</link>
      <pubDate>Sun, 17 Apr 2022 17:31:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/v-cloak/</guid>
      <description>进入Gallery的时候，总会先显示很难看的 Vue 源代码的 mustache brackets。这是因为网速慢一点的话，先加载js文件，等到挂载结束才render页面。
于是 v-cloak 指令就排上用场了:
 Used to hide un-compiled template until it is ready.
 v-cloak 经常用来隐藏未编译的模板，直到渲染完成。
 v-cloak will remain on the element until the associated component instance is mounted. Combined with CSS rules such as [v-cloak] { display: none }, it can be used to hide the raw templates until the component is ready.
 v-cloak 将会作用在某个元素，直到完成挂载。结合CSS，如 [v-cloak] { display: none } 使用，可以用来隐藏还没准备好的模板。
例子：</description>
    </item>
    
    <item>
      <title>拼刀刀的套路有多深？到底，要我砍几刀？</title>
      <link>http://blog.nekolas.cafe/posts/life/pdd-story/</link>
      <pubDate>Fri, 08 Apr 2022 02:43:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/pdd-story/</guid>
      <description>初尝甜头 我，原本在家准备公园野餐的东西，突然微信弹出消息，是大学寝室群里的小梅，叫我们帮忙砍一刀。
帮朋友砍一刀很简单，自己被套进去也玩起来亦很简单。
不经意间我也开始了“叫别人帮我砍”的旅程，目标提现金额是￥ 100。
周四，公园人不多，躺在树荫之下，凉爽异常，心旷神怡。和女友并排躺着的我了摸起手机，忽然记起助力提现这回事，于是又呼朋唤友，叫人帮我砍。
忙活了一阵子，没想到真的砍到了￥ 100……坑多多似乎也没那么坑？
我扭头，问女友今晚想吃啥（土豪般拍胸脯
再战￥ 500 薅到 100 块后，拼多多觉得似乎还不够，要再给我￥ 500 的提现机会，而规则和之前一毛一样：打扰你的朋友，叫他们浪费自己手机电量拿帮你助力。
我想，成呀，反正已经麻烦了，再帮我一次咋地？检验友情的时候这不来了么？于是我又一阵忙活，东拼西凑了十来个人。但￥ 500 的挑战，确实是比￥ 100 难多了，甚至超出了我的能力范围，我也没那么多可以帮砍的朋友啊。这事儿就这么搁置了。
说到砍一刀，也不完全是 annoying 之事，甚至可以拿来当“美女，帮我下快手极速版行不，免费送你充电线！”这种烦人搭讪的挡箭牌。
我说，帮你下载快手可以，那你能帮我找十个人来助力吗？他似乎犯难，“又是拼多多？”，态度软下来，后来我们就走了，既然你帮不了我，那我也懒得帮你。
其实我有点想帮他下快手极速版，因为，我想砍一刀，我觉得我离那￥ 500 非常非常近，似乎触手可得。再来三个人，我就成了！
这么想，果然还是太 naive，太瞧不起坑多多了。
我，自掏腰包￥ 3.5 买了 10 刀 时间来到深夜 11 点。心有不甘的我拿起了我爸的手机，企图砍一刀。结果还是那样：你还差最后 0.1 个钻石啦！就 0.1 个！努努力在拉几个人￥ 500 就是你的啦！
规则 aka 套路 玩过拼多多砍一刀的朋友都知道，它的套路非常简单： 假设￥ 100 提现金额，一开始，他就给你无限的幸运值，￥ 100 里白给你￥ 99.9，你只需要动动手指，玩玩转盘，拿下那最后的￥ 0.1，看起来蛮简单的。
但这转盘一开始给的还是钱，99 块，5 块，1 块，0.1 块 0.01 块。
后来是 10 个金币，然后 1 个金币，0.1 个金币。
再后来是钻石，10 个，1 个，0.</description>
    </item>
    
    <item>
      <title>罗马人的故事</title>
      <link>http://blog.nekolas.cafe/posts/book-music-movie/roma-jin-story/</link>
      <pubDate>Wed, 06 Apr 2022 23:59:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/book-music-movie/roma-jin-story/</guid>
      <description>最近开始读盐野七生的这套《罗马人的故事》，是我会推荐的历史通俗读物。要写好历史书其实不容易，历史的走向往往错综复杂，作者很擅长梳理事件脉络，让书保持很高的可读性，也会客观地分析罗马的政治经济，从多方角度阐述，是什么让罗马成为罗马，是什么让它兴起或衰亡。
其一：罗马不是一天建成的 本书讲的是从公元前 753 年，罗穆路斯建立罗马，直到公元前 270 年，罗马完成意大利半岛的统一，罗马从默默无闻的中部小国，逐渐发展成为强国的 500 多年历史。
从王政走向共和政体 从罗穆路斯建国，一直到布鲁特斯推翻最后一代国王的统治，这期间经过了 244 年。书中也介绍了历代国王的生平和政绩。除了最后一代国王“傲慢者”塔克文，其他的国王都有不俗的政绩，帮助罗马从各个方面发展。
下图描述了罗马历代国王的主要事迹。 查看大图：罗马的王政时期
共和时代 推翻了王政的罗马意识到，昏庸的国君很容易把国家的命运带入歧途，于是，为了防止独裁，罗马统治者由原来的国王变成了两个执政官，且任期只有一年。除此之外，还有元老院牵制执政官的权力。
被选入元老院的议员往往是罗马贵族，所以，这时确立的共和政体，实际上是贵族政体，元老院议员的人数大概有 300 人，无一为平民出身。贵族和平民阶层的矛盾，从这时起将延续好几百年，直到《十二表法》出台后的第四年，出台了一项法律，同意贵族和平民阶级通婚，两个阶级之间的矛盾才得到缓解。此时的罗马，还是由贵族们在主导统治。
但平民可以通过拒服兵役来表达不满。于是元老院派出三名代表，前去当时发展较先进的希腊的一些城邦，以考察他们的政治经济。
书中还介绍了雅典和斯巴达这两个希腊城邦的历史，真是两种截然不同的民族秉性。雅典人崇尚自由和思考，雅典也是人类历史上第一个确立民主政治的城邦。斯巴达则崇尚武力，这跟他们长期的内战有关，斯巴达非常封闭，一切以军事为要务，与喜欢辩论的雅典人相比，斯巴达人可以说是沉默寡言。
在伯里克利领导下的雅典，度过了繁荣的 30 年。同样，一心深耕军事力量的斯巴达，与雅典一同逐渐成为希腊城邦中率先崛起的两大城邦。然而，一山不容二虎，在随后的伯罗奔尼撒战争中，雅典不敌斯巴达，逐渐走向没落。
而前去雅典考察的三位代表，却并没有将雅典的民主政治照搬回罗马，也许是觉得不适用于罗马的情况吧，罗马依旧走的是寡头政治，也就是共和路线，平民阶层依然没有实质的权力，也无法跟贵族通婚，甚至在欠债的情况下，还是要卖身还债。原因是从古至今，罗马的贵族拥有了太大的实力，不仅拥有地产，还有类似于后援团的“被保护民”。但是在平民阶层的不断反抗中，他们逐渐获得了自己想要的权力，随后出台的法律以及护民官的出现，还有在后期，两位执政官既可以是两个贵族，亦可以都是平民，便是平民阶层逐步上身的体现。也许，正式因为平民阶层力量的崛起，罗马的政治体系才得以保持三角的平衡，互相牵制。
是什么成就了罗马人 关于的罗马兴盛，三位希腊人是这样认为的：
哈利卡纳索斯的狄俄倪索斯认为是宗教影响了罗马人的见解。
 罗马的宗教与其说是约束，不如说是用来保佑人类的。这一宗教没有狂热崇拜的倾向，所以更容易与其他民族建立起相互包容而不是对立的关系。
 波利比乌斯认为，是罗马独特的政治体系让罗马兴盛。
 罗马人不执著于政体，通过执政官制度、元老院制度和市民大会有效利用王政、贵族政体和民主政体的优势。由于确立了这一独特的政治体系，罗马消除了国内的对立关系，建立了统一的体制
 另外，普鲁塔克认为，罗马的兴盛的关键在于同化失败者的决策。
确实，罗马人非常包容。作为战胜方，罗马人通常不会掠杀俘虏，他们更愿意同化战败方，甚至还会给他们罗马市民权，即使不去殖民他们让他们成为罗马的力量之一。反观雅典，就连亚里士多德这样的伟大哲学家也得不到雅典的市民权，在雅典，一日为奴，终身为奴。
兼容并包的个性，让罗马人得以及时强化自我，补充新鲜血液。罗马并不是一帆风顺的民族，他们经历过凯尔特人的入侵，损失了巨大的财产，家园受到严重损害；第二次布匿战争中被名将汉尼拔打得一败涂地，一度只剩下 6000 骑兵只剩 300，8 万步兵只剩 6000 人。开放的个性，罗马总是能从挫折中，缓慢但持久地站起来。</description>
    </item>
    
    <item>
      <title>Vue-cli 重写 to-do list 之所思</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/dodo-v2/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/dodo-v2/</guid>
      <description>Dodo 1.0 是一款用 jQuery 写的待办记事 Web App，当时是在看黑马 JS 的课程，完全是跟着老师写的，现在回头看，有些真的是看不懂 😂。随着 Vue 知识的增加，遂想用 Vue.js 重写一下这款 App，就当练手。
项目体验：
Dodo 1.0
Dodo 2.0
Dodo 虽小，问题可不少，独立地从 0 构建一个 App，思考的还挺多。我自己非常清楚，很多地方可以简化或有更好的办法，我可能现在没法做到简化，但以后一定可以。于是用这篇文字记录解决方案和过程中的所思所想。
localStorage 重做项目也相当于复习localStorage的知识了。
localStorage 概述  作为 Web Storage API 的接口，Storage 提供了访问特定域名下的会话存储或本地存储的功能，例如，可以添加、修改或删除存储的数据项。
 localStorage 里面存储的数据不会过期，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。
（session 这个单词让我想起，在一些外国网站，如果要找客服聊，结束按钮写的就是“End This Session”，结束这段会话。）
在 Dodo 项目中需要一直储存用户的 todos，所以需要的是不会过期的 localStorage。
localStorage 的方法 Storage 对象有几个方法，也可以用在localStorage上：
   方法 描述     localStorage.getItem() 接受一个键名作为参数，返回键名对应的值。   localStorage.setItem() 该方法接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。   localStorage.</description>
    </item>
    
    <item>
      <title>用Github Action自动部署Hugo博客Public页面</title>
      <link>http://blog.nekolas.cafe/posts/hugo/github-action/</link>
      <pubDate>Sat, 26 Mar 2022 00:33:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/github-action/</guid>
      <description>在知道Github Action之前，我甚至没有托管我的博客源码，导致有些时候代码改乱了，也没有后悔药可以吃。在折腾J小将的博客的时候，实现了用Github Action部署Hugo博客，即，只需要push一次源码，然后自动生成静态文件到静态分支。
于是开始折腾自己的博客：开始把源码放到一个仓库（设为私密），公开的静态码放另一个仓库，每次只需要更新源码仓库即可。
写此帖记录一下处理步骤。
参考了一下两位的文章，非常有帮助：
https://zhuanlan.zhihu.com/p/403221054
https://dwye.dev/post/hugo-github-action/
简单描述一下步骤 首先需要在本地文件博客根目录创建/.github/workflows/gh-pages.yml，写一些配置。还需要生成一对SSH密钥来进行Github配对，分别是Secrey Key和Public Key，分别放在源码仓库和静态仓库的配置中。
Hugo 我这里是一个仓库nicopcat/Hugo-Sources存放源码，一个仓库nicopcat/nicopcat.github.io存放静态文件，主分支都是 main，有submodule，非extended版本。
生成SSH密钥   检查是否已经生成过SSH
查找路径C:\Users\root\.ssh，里面有两个文件，一个是.pub格式，放的是可以公开的公钥（Public Key），另一个则是没有格式的密钥（Secret Key），不要与人分享。
  也许你已经生成过密钥并由于种种原因放在了 Github - settings - SSH and GPG keys 里：
如果有，可能需要删除，不然会与接下来的配置冲突。
  如果之前没有生成过密钥，则输入以下指令：
ssh-keygen -t rsa - -C &amp;quot;$(git config user.email)&amp;quot;  在源码仓库，比如我的仓库nicopcat/Hugo-Sources下：
 找到 Settings - Secrets - Action 看到Secret，就知道是要放密钥（Secret Key） 点 New repository secret ，新增密钥，将.ssh/里的密钥全部拷贝进来，内容以-----BEGIN OPENSSH PRIVATE KEY-----开头 名字必须与下面github action workflows文件中的吻合，比如我的是ACTIONS_DEPLOY_KEY     在静态文件仓库，即nicopcat/nicopcat.</description>
    </item>
    
    <item>
      <title>给J小将的写博客指南</title>
      <link>http://blog.nekolas.cafe/posts/hugo/how-to-setup-blog/</link>
      <pubDate>Sat, 26 Mar 2022 00:33:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/how-to-setup-blog/</guid>
      <description>剧情摘要：前些日子，帮J小将在主机上搭了博客，但是如何让她在另一台电脑也能写文章呢？
 前提准备 下载Git  地址：https://git-scm.com/download/win 选择64-bit Git for Windows Setup 打开安装包，按照推荐项一路enter下去就好 在任意一个窗口地址栏输入cmd，按回车，输入git version，回车。若出现版本号则说明下载成功。  下载Hugo 方法一：二进制安装包  地址：https://github.com/gohugoio/hugo/releases 找到 hugo_extended_0.95.0_Windows-64bit.zip 安装包，下载。 创建文件夹  创建一个新的文件夹，G:\Hugo 创建一个新的文件夹，G:\Hugo\bin   确保 hugo.exe 文件在 G:\Hugo\bin 文件夹中 把 hugo.exe 可执行文件添加到你的 PATH路径中  搜索：环境变量 - 编辑系统环境变量 - 高级 - 环境变量 系统变量 - 找到path - 双击打开 - 新建变量 - 输入G:\Hugo\bin - 保存   运行hugo.exe 输入hugo version查看得到版本号就说明安装成功。  方法二：用chocoley安装  地址：https://chocolatey.org/install ,按照提示安装即可 运行 普通版本  choco install hugo -confirmextended版本：</description>
    </item>
    
    <item>
      <title>黑客与画家</title>
      <link>http://blog.nekolas.cafe/posts/book-music-movie/hacker-and-painters/</link>
      <pubDate>Tue, 22 Mar 2022 14:25:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/book-music-movie/hacker-and-painters/</guid>
      <description>关于艺术，思考和编程的随笔文章杂集，见解深刻超前。
好的设计是永不过时的设计，具有超前的思考也经得住时间的洗礼。这本小册子里的许多想法，放到今天就成真了，不得不佩服他的独到的思考和长远的预见性。
摘录一些值得咀嚼的段落。
Chap 3. 不能说的话 为什么这样做  做一个异端是有回报的，不仅是在科学领域，在任何有竞争的地方，只要你能看到别人看不到或不敢看的东西，你就有很大的优势。
  练自己去想那些不能想的事情，你获得的好处会超过所得到的想法本身。
 守口如瓶  你的思想是一个地下组织，绝不要把那里发生的事情一股脑说给外人听。“格斗俱乐部“第一条就是不要提到格斗俱乐部。
  能够一起谈论”异端邪说“，并且不会因此气急败坏的人，就是你最应该认识的朋友。
 永远质疑  如果你数学不好，那么你自己会知道，因为考试的时候你得不出正确答案。但是，如果你的思想很保守，你自己不会知道，而且你很可能还会持有相反的看法。
  想要摆脱你自己的时代的潮流，需要一点自觉。没有了时间所产生的距离，你不得不自己创造距离。你不要让自己成为人群的一分子，而要尽可能远离人群，观察正在发生的事情，特别注意哪些被压制的思想观点。·
  如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。问自己，什么话是我不能说的？为什么？
 Chap 6. 如何创造财富 工作是什么  一个大学毕业生总是想“我需要一份工作”，别人也是这么对他说的。好像变成某个组织的成员是一件多么重要的事情。更直接的表达方式应该是“你需要去做一些人们需要的东西”。即使不加入公司，你也能做到。公司不过是一群人在一起工作，共同做出某种人们需要的东西。真正重要的是做出人们需要的东西，而不是加入某个公司。
 可测量性和可放大性  要致富你需要两样东西：可测量性和可放大性。你的职位产生的业绩应该是可测量的，否则你做得更多，也不会得到更多的报酬。此外你还必须有可放大性，也就是说你做出的决定能够产生巨大的效应
  有一个办法可以发现是否存在可放大性，那就是看失败的可能性。因为收入和风险是对称的。
  如果你有一个令你感到安全的工作，你是不会致富的，因为没有危险，就几乎等于没有可放大性。
 Chap 9. 设计者的品味  好设计是简单的设计。
 奥卡姆剃刀：简单的解释是最好的解释。
在数学领域，简单的证明是了不起的证明。
在自然界，因为野生动通常不会有冗余的脂肪，所以看起来健美。
 好设计是永不过时的设计。
 时间的考验是最残酷的考验。
 好设计是解决主要问题的设计。
 外观差的设计不一定是坏设计，但影响功能的设计一定是坏设计。
文中举出了关于字体的例子，让我想起前段时间看的书《音乐即自由》，注释的英文字体非常“拧巴”，只有用户停下来仔细看才看得清楚，字体本身不敢说是坏设计，但使用的场所让它成为了坏设计。
 好设计是启发性的设计。
 启发性设计能调动使用者的积极性，更吸引人去参与使用。
 好设计通常是有点趣味性的设计。</description>
    </item>
    
    <item>
      <title>国王排名 &amp; 青春变形记 &amp; 新蝙蝠侠</title>
      <link>http://blog.nekolas.cafe/posts/book-music-movie/some-movies/</link>
      <pubDate>Mon, 21 Mar 2022 14:25:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/book-music-movie/some-movies/</guid>
      <description>国王排名 王様ランキング 这番可以说从第22集开始彻底翻车。
之前的印象 国王排名凭借见简单的画风和弱小王子下克上，富有勇气的剧情火出了圈。这部作品的外壳虽然低龄，但内容却非常成人。里面有为了一己私利血腥而大开杀戒的女主角米兰乔，有为了追求力量而不惜吞噬子嗣肉体的伯斯王，他们俩的关系非常暧昧，总之是非常依恋彼此的，但不管是体型还是年龄的差距都非常大。
也行吧，反正魔法世界都是随心所欲的？
急转直下的剧情👇   多年前，米兰乔因为种种原因把伯斯王国屠城，也杀了波吉的妈妈。
22集：波吉选择原谅。
  多年后，米兰乔又因为某些原因，企图把伯斯王麾下人马都杀了，包括希琳，即二王子戴达的妈妈，幸好被众人救下。
22集：戴达选择原谅并且喜欢米兰乔要娶她为妻子。希琳一开始非常惊讶，但选择祝福。
  据说漫画的结尾，死去的波吉的妈妈出现在往生桥的另一边，祝福米兰乔获得幸福……
  我天，琼瑶都不敢这么写吧？
总之 总结起来，就是全员圣母以及对养幼女和乱伦纵容和允许。就像一个杀人狂魔，因为长得很乖很小巧，而且童年受过非常大的伤害，于是她可以让别人受折磨而不必承担任何后果，大家就算家人被她杀害也要原谅她，爱她……
魔法世界再怎么随心所欲也要稍微考虑一下基本的伦理和底线吧？
青春变形记 Turning Red 皮克斯出品的动画，必然看得很“顺”，娱乐性和情感性十足。对于土生土长的中国人来说，应该没有太大的代入感，但这部电影表达了导演兼编剧石之予(domeeshi)与她妈妈之间的关系。
在纪录片中，她说“她想保持和妈妈的亲近关系，但又意识到她正在成长为一个不一样的人。”
整部动画是以一种夸张娱乐地方式表达这些我们也许也有过的挑战和冲突，如何在不伤害与妈妈建立的纽带之下成长为一个独立的个体呢？
结尾的相处方式给出了答案。
新蝙蝠侠 The Batman 破败，漆黑，充满crimes的哥谭市，夜雨总是下个不停，导演 Matt Reeves 带给我们一个不再是超级英雄的蝙蝠侠。
Robert Pattinson 扮演的蝙蝠侠，不再是我们印象中的那个“少爷”，我是说，他当然也是Wayne家的大少爷啦，但是更落魄，更像80年代电影中的侦探，没有太多的高科技，和黑帮打交道，靠谈话获取线索，靠肉搏揍人，阿蝙厚重的戏服让他看起来笨重又原始。
在一反超英设定上，它和国王排名在这个角度居然有相似的地方，后者被炒热，大概也因为其简单低龄的画风与以往的动画非常不一样。
让超级英雄回归普通人，或者说，稍微普通一点的超级英雄，是可以的，但致命的是，这一版的阿蝙缺乏他该有的魅力，他显得笨重和木讷，甚至没有猫女出彩。
我想起另一部风格相似的影片—— 2019年上映，华金·菲尼克斯主演的《Joker》，阿蝙既没有华金狂人式的爆发性的魅力，也更没有《真探》中那种性感的侦探智力，新蝙蝠侠缺乏一种张力。</description>
    </item>
    
    <item>
      <title>Git 使用笔记</title>
      <link>http://blog.nekolas.cafe/posts/tech/posts/git-guide/</link>
      <pubDate>Mon, 21 Mar 2022 12:29:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/posts/git-guide/</guid>
      <description>最近发现了一个非常有意思的网站，Github 标星 24.1k。趣味的交互式体验以及丰富的视觉化效果，让学 Git 变得非常轻松。
跟 Git 打过交道的朋友，大概都受过不少的苦，Git 流程不仅概念比较抽象，命令也繁多，让人头大。报错时，我通常就 Google 一下，问题貌似暂时解决了，但这背后的原理还是一知半解的，下次说不定还会发生。这个网站又给了我掌握 Git 的决心！
学习地址：LearnGitBranching
Github 地址：LearnGitBranching
下面是一些笔记~
基础篇 循序渐进地介绍 Git 主要命令
1. Git Commit 与 Git Branch Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：
 早建分支！多用分支！
  提交分支  git commit &amp;lt;branch&amp;gt;切换到新的分支  git checkout &amp;lt;branch&amp;gt;如果你想创建一个新的分支同时切换到这个新创建的分支  git checkout -b &amp;lt;your-branch-name&amp;gt; Git 2.23 版本中，引入了一个名为 git switch 的新命令，最终会取代 git checkout，因为 checkout 作为单个命令有点超载（它承载了很多独立的功能）。
 2. Git Merge 假设有需要一个 bugFix 分支：</description>
    </item>
    
    <item>
      <title>Hugo 和 PaperMod主题的小功能</title>
      <link>http://blog.nekolas.cafe/posts/hugo/tips-for-playing-hugo/</link>
      <pubDate>Mon, 14 Mar 2022 00:18:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/tips-for-playing-hugo/</guid>
      <description>1. 将hack字体CDN link 引入 head 最简单的方法是把hack字体的CDN地址引入head.
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css&amp;#34;&amp;gt; 接下来就是找到正确的地方。
在看某些教程的时候，我非常困惑，文件地址到底是根目录下，还是theme下面的文件？
我们最终的目的是把上面的link放到在index.html的&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;部分，所以需要找到post是在哪里render成head的。
我们发现theme/partials里面有一个head.html，确实可以修改这里，但我们最好不要修改原来的主题，否则很难维护，PaperMod主题在partials里配备了可供用户自定义的文件extend_head.html。
找到 根目录/themes/PaperMod/layouts/partials/extend_head.html，插入上面的link即可：
{{- /* Head custom content area start */ -}} &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css&amp;#34;&amp;gt; {{- /* Insert any custom code (web-analytics, resources, etc.) - it will appear in the&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; section of every page. */ -}} {{- /* Can be overwritten by partial with the same name in the global layouts. */ -}} {{- /* Head custom content area end */ -}} 引入成功，接下来需要找到相关的css文件修改。</description>
    </item>
    
    <item>
      <title>好玩的JavaScrip动画框架——GSAP 【intro试译】</title>
      <link>http://blog.nekolas.cafe/posts/tech/posts/gsap-intro/</link>
      <pubDate>Sat, 12 Mar 2022 13:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/posts/gsap-intro/</guid>
      <description>GSAP 全称是 GreenSock Animation Platform，是一个非常强大的基于 JS 的动画库，初次接触的我深感，短短几行代码就能实现非常酷炫的特效。
在学习的过程中，顺便把官网的教程翻译成中文参考。
什么是 GSAP? GSAP 其实是在操控属性 动画最终可以归结为一个每秒多次改变属性值的过程，可以使某物产生移动、褪色、旋转等效果。GSAP 抓取一个起始值和一个终止值，然后每秒在它们之间插值 60 次。
例如，在 1 秒内将一个物体的 X 坐标从 0 改变到 1000，并使其迅速向右移动。将不透明度从 1 到 0 渐变，使一个元素淡出。作为一个动画师，你的任务是决定改变哪些属性，多快，以及运动的风格（即缓动&amp;ndash;我们后面会讲到）。
DOM, SVG, &amp;lt;canvas&amp;gt; 以及其他 GSAP 并没有预定义它可以处理哪些属性。它超级灵活，几乎可以适应你扔给它的任何东西。GSAP 可以对以下所有内容进行动画处理：
 CSS: 2D and 3D transforms, colors, width, opacity, border-radius, margin, and 几乎所有的 CSS 属性 SVG 属性: viewBox, width, height, fill, stroke, cx, r, opacity, etc. 像 MorphSVG 和 DrawSVG 这样的插件可以用于高级效果 任何数值 例如，一个被渲染到&amp;lt;canvas&amp;gt;的对象。对三维场景中的相机位置进行动画处理，或对数值进行过滤。GSAP 经常与 Three.js 和 Pixi.</description>
    </item>
    
    <item>
      <title>Everything I Am Is Yours</title>
      <link>http://blog.nekolas.cafe/posts/book-music-movie/everything-i-have-is-yours/</link>
      <pubDate>Fri, 11 Mar 2022 14:13:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/book-music-movie/everything-i-have-is-yours/</guid>
      <description>又在英剧 疼痛难免 中听到了这首曲子，喜欢！如果没记错的话，也出现在了 HBO 迷你剧 大小谎言 中。
* 确实记错了，是出现在 Normal People 里面，大小谎言 S2 确实有 Villages 的曲子但不是这首。😅
 lycirs I am just a man
To bend all the wires
Tight rope walking fool
Balanced on desire
I cannot control
These ever changing ways
So how can I be sure
The feeling will remain
It will always change
For everything I am is yours
Everything I am is yours
I find it hard to say</description>
    </item>
    
    <item>
      <title>Vue课程笔记：Animations and Transitions</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/vue-animations-transitions/</link>
      <pubDate>Sat, 05 Mar 2022 01:50:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/vue-animations-transitions/</guid>
      <description>一般来说，动画可以由CSS完成，Vue也提供了一系列帮助过渡和动画的工具。
仅用CSS控制动画 直接定义属性 假设有一个正方形block。 动画效果：.5秒后，向左移动80像素，背景颜色变为royalblue:
.animate { background-color: royalblue; transform: translateX(-80px); transition: all 0.5s ease-out; } 效果： 使用animation + @keyframes实现复杂的动画效果 用@keyframes可以实现动画在不同帧数时的表现
.animate { animation: slide-scale 2.8s ease; } @keyframes slide-scale { 0% { transform: translateX(0); } 25% { transform: translateX(-120px); background-color: royalblue; } 50% { transform: translateX(0px); background-color: limegreen; } 75% { transform: translateX(120px); background-color: lightgreen; } 100% { transform: translateX(0px); background-color: orange; } } 效果： Vue.js 过渡&amp;amp; 动画 单元素/组件的过渡 用&amp;lt;transition&amp;gt;&amp;lt;/transition&amp;gt;包裹目标元素或组件，可以添加进入或离开过渡效果</description>
    </item>
    
    <item>
      <title>复健</title>
      <link>http://blog.nekolas.cafe/posts/life/recover-strength/</link>
      <pubDate>Thu, 03 Mar 2022 12:29:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/recover-strength/</guid>
      <description>爬山的时候很喘，喘到怀疑人生。腰托让我喘不上气，中午的粽子让我胀气，眼镜的偏折让我视线飘忽，感冒让我无力。
她很担心，问我要休息会儿么？
我说好，颤颤巍巍的腿作了强烈暗示，似乎也不得不说好……
回想上次爬这座山，也不记得是几年前了，非常轻快地爬到我们正在休息的这个凉亭，而我印象中，总是那个走在前面等后面的人。那时有多轻松，现在就有多痛苦和无力。理智告诉我，尽管我很想恢复手术前的体力，但是也要一步步地实现，但是身体却不愿意接受和承认。
我很想继续往上爬，但坐在石凳上，眼泪的闸门再也关不上，就坐在石凳上哭泣，身旁的她握住我的手，轻声安慰。
发泄了一阵，和她聊聊有的没的，心情好多了，一起去吃了还挺喜欢的微波日式料理店，点了上次没点上的咖喱炸鸡饭。在闹市区散散步，末了，回到小区告别，又多聊了半个多小时，仿佛很久没见地朋友那般放松聊天。
刚刚翻阅相册，里头有许多好玩的东西，而我也在回国之后就把拍照这件事情忘记了。除了身体，需要复健的事情有非常多，慢慢捡起来吧。 </description>
    </item>
    
    <item>
      <title>用Vue实现多标签页面（tab栏）切换的两种方法</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/tabs-with-vue/</link>
      <pubDate>Sat, 19 Feb 2022 14:25:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/tabs-with-vue/</guid>
      <description>这里有一个用简单的button和子组件做的标签页面。 效果如下： 目标 点击Active Goals按钮，就可以激活Active Goals组件下的内容。同样的，点击Manage Goals按钮，就可以激活Manage Goals组件下的内容。
结构 HTML结构:
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;button&amp;gt;Active Goals&amp;lt;/button&amp;gt; &amp;lt;button&amp;gt;Manage Goals&amp;lt;/button&amp;gt; &amp;lt;active-goals&amp;gt;&amp;lt;/active-goals&amp;gt; &amp;lt;manage-goals&amp;gt;&amp;lt;/manage-goals&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; active-goals组件：
&amp;lt;template&amp;gt; &amp;lt;h2&amp;gt;这是 Active Goals 组件的内容&amp;lt;/h2&amp;gt; &amp;lt;/template&amp;gt; manage-goals组件：
&amp;lt;template&amp;gt; &amp;lt;h2&amp;gt;这是 Manage Goals 组件的内容&amp;lt;/h2&amp;gt; &amp;lt;/template&amp;gt; 都是很简单的两个组件。
实现 方法1：v-if 结合 methods 传值 定义一个data项selectedBtn:
data() { return { selectedBtn: &amp;#34;active-goals&amp;#34; }; 给button绑定点击事件：
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;button @click=&amp;#34;setSelectedBtn(&amp;#39;active-goals&amp;#39;)&amp;#34;&amp;gt;Active Goals&amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;setSelectedBtn(&amp;#39;manage-goals&amp;#39;)&amp;#34;&amp;gt;Manage Goals&amp;lt;/button&amp;gt; &amp;lt;active-goals&amp;gt;&amp;lt;/active-goals&amp;gt; &amp;lt;manage-goals&amp;gt;&amp;lt;/manage-goals&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; 当我们点击按钮，参数就会传到接下来定义的方法中
methods: { setSelectedBtn(btn) { this.selectedBtn = btn; } 每当点击按钮，我们就能让Vue知道我们点击的是哪一个按钮，然后用v-if显示该组件的内容:</description>
    </item>
    
    <item>
      <title>Hugo | Creat a Gallery Page with Spolight Style </title>
      <link>http://blog.nekolas.cafe/posts/hugo/hugo-gallery-by-vue/</link>
      <pubDate>Sun, 06 Feb 2022 03:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/hugo-gallery-by-vue/</guid>
      <description>1.Create a gallery page My goal is to build a galley sub page which can contain my photo works.
The problem is that I don&amp;rsquo;t know how to use .md file to render these markups mixed with Vue scripts so that I had to put a raw .html file and then imported css stylesheet from my theme.
Stacks:
 HTML CSS Vue.js  1.2 HTML They are simple markups:
&amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>2022/2/2 星期三 新年随想</title>
      <link>http://blog.nekolas.cafe/posts/life/life-is-so-hard/</link>
      <pubDate>Wed, 02 Feb 2022 01:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/life-is-so-hard/</guid>
      <description>又是一个中国新年。
总有人抱怨说没有年味，几乎年年如此了。印象较深的一次，是还在读高中的某一年。那会儿刚在亲戚家吃完饭，回到家也就晚上8点多，立刻换上睡衣，美美地躺在床上吃着零食看下载好的电影，还在微博看别人吐槽春晚，可乐了。妈妈已经出门，爸爸还在上班。零点那刻，我独自一人抱着电脑独享窗外吵闹的鞭炮。大概从那时起，年味于我就不存在了吧。
今年，也是相对尴尬的一年。这个年纪被要求得很多，被“应该之事”询问得很多，而那些亲戚朋友想要我 achieve 的事情我一件都没有做到。这时，脸皮厚大法就派上了用场，问工作就嘻嘻哈哈过去，问婚嫁就尴尬一笑，默不作声。其实这些事情他们也不在乎，所以没必要解释得过于清楚。我知道这样的日子不会一直持续下去，默默地这么想，也就够了，总会有走上正轨的那一天，我花时间磕死在这上头总能行的。
这两天汪汪心情非常不好，也许也是想到了现实问题，让自己觉得挫败，无论如何嬉皮笑脸也不见她好，唉，我也很迷惑。我觉得旁人的劝说和鼓励，有时有点用，有时压根没用，还是要自己去坠到谷底，然后逐渐想明白吗，往上走。
我已经预想到另外的挫败，就是投递N份简历没人查看，没面试；或者面试的时候被为难，被比较；或是工作的时候遇到困难或犯错……反正困难总是有的，（普通人的）人生真就是难啊。
今天跟阿罗说，先不续重疾险了，她说好。好消息是，竟然可以有两年的暂停期，只是这期间不理赔。行呗。
今天比较好的是，夜晚出去散了会儿步，走在雨夜里，听妈妈讲他们朋友的一些事情，细雨打在脸上，啊，这大年初一的街上真是冷清啊。</description>
    </item>
    
    <item>
      <title>Vue 3 | emits 警告</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/vue-warn-emits/</link>
      <pubDate>Sun, 30 Jan 2022 15:17:19 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/vue-warn-emits/</guid>
      <description>用 $emits 写组件通信的时候报错了：
 [Vue warn]: Extraneous non-emits event listeners (del) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the &amp;ldquo;emits&amp;rdquo; option. at &amp;lt;FortuneTransfer cash=&amp;ldquo;珠宝若干&amp;rdquo; real-easte=&amp;ldquo;House in Winona&amp;rdquo; onDel=fn&amp;gt; at 
 父组件部分
app.component(&amp;#39;fortune-transfer&amp;#39;, { props: [&amp;#39;cash&amp;#39;, &amp;#39;realEaste&amp;#39;], template: ` &amp;lt;h1&amp;gt;我要 {{ cash }}&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;我还要 {{ realEaste }}&amp;lt;/h2&amp;gt; &amp;lt;button @click=&amp;#34;$emit(&amp;#39;del&amp;#39;)&amp;#34;&amp;gt;删除&amp;lt;/button&amp;gt; &amp;lt;br&amp;gt; ` }) app.</description>
    </item>
    
    <item>
      <title>用 Vue 写一个天气 Web App</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/vue-weather-app/</link>
      <pubDate>Thu, 27 Jan 2022 13:55:19 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/vue-weather-app/</guid>
      <description>在油管看到一个用Vue-cli 3写天气App的视频，非常简单易上手，界面也很好看，之前也没用过vue-cli 3写+打包应用，就打算跟着做练练手。
项目地址： https://www.niqks.tk/weather-app/
油管地址： https://www.youtube.com/watch?v=JLc-hWsPTUY&amp;amp;ab_channel=TylerPotts
1. 前提 安装这些东西：
 npm/yarn node.js git  2. Vue项目初始化 2.1 安装Vue-cli脚手架 首先在硬盘的某块区域，创建weather-app文件夹，存放Vue项目
cd weather-appnpm install -g @vue/cli安装完毕提示：
 Your connection to the default npm registry seems to be slow.Use https://registry.npm.taobao.org for faster installation? YesYes, 选择淘宝镜像加速
2.2 创建Vue项目 进到项目文件夹，利用命令创建项目名称，
vue create weather-app? Please pick a preset: (Use arrow keys) &amp;gt; no1 ([Vue 3] dart-sass, babel, typescript) Default ([Vue 2] babel, eslint) Default (Vue 3) ([Vue 3] babel, eslint) Manually select features选择 Default (Vue 3)</description>
    </item>
    
    <item>
      <title>试水 | 我正在 OpenSea 上架了一幅 &#39;Happy Kitty&#39; NFT</title>
      <link>http://blog.nekolas.cafe/posts/life/my-first-nft-list/</link>
      <pubDate>Sat, 22 Jan 2022 13:37:30 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/my-first-nft-list/</guid>
      <description>无意中刷到 一个印尼小哥在 NFT 平台天价售出自己 900 多张自拍照 的新闻，跟啊汪开玩笑说，把你的画儿放到上面说不定也能卖个好价钱喔。
开玩笑归开玩笑，我觉得可以去看看那边在卖点什么，顺便也随便挂点东西 ，卖个好价钱然后躺平。
NFT 是啥？ NFT 已经不是什么新鲜事，原文叫 Non-Fungible Token，中文叫“非同质化代币”，可以称之为一种 以区块链为背景的虚拟资产。
因为很多虚拟资产的所有权和稀缺性经常难以维护（盗版），所以 NFT 可以算作新型知识产权的保护机制。不过 NFT 卖那么贵主要还是话题炒作和大公司的加入。至于印尼小哥的自拍为什么走红， 我真的不太懂……
如何在 OpenSea 上 list 自己的作品 注册账号  进入 OpenSea 官网，注册一个账户。 它会叫你 Connect your wallet，这里的钱包是虚拟加密货币的钱包平台，后续需要用钱包支付购买相关费用。 推荐小狐狸 MetaMask，点击下载 Chrome 浏览器插件或手机客户端，完成 MetaMask 的注册，需要牢记 MetaMask 提供的 Secret Recovery Phrase。
Create   点击右上方的 Create 按钮，上传你的作品，添加名字、属性、描述等帮助你的热卖的描述。  Blockchain 有两种，一个是用户数多的 以太坊 Ethereum，另一个是比较小众的 Polygon。
那么重点来了：上传 NFT 作品需要支付一定的 Gas Fee。比如要出售的作品价格是 0.002 ETH，那么大概需要支付 0.004~0.007 ETH 作为 Gas Fee，把自己作品的售价还贵！0.</description>
    </item>
    
    <item>
      <title>写在J小将生日</title>
      <link>http://blog.nekolas.cafe/posts/life/jane-bday-2022/</link>
      <pubDate>Fri, 14 Jan 2022 23:35:19 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/jane-bday-2022/</guid>
      <description>J 小将生日之前，我们决定去以前经常去的一家日料小店“庆祝” 大概是真的很喜欢吃东西二人组
早上还闹了一点矛盾，引发矛盾的事情（关于洗衣机）说出来一定会让人觉得好笑，对不起。宝贝，请原谅我。😟
下午缓和后，又各自干活。早上吃的米皇饺+生滚靓（皮蛋）粥美味但不太管饱。感恩的是，她妈妈和丽娜贴心地专门跑来给我们送炸鸡腿，瞬间吃上了幸福的下午茶。 3 点半，饮茶乜？？
将近六点打车去日料店。天空飘下厚厚的细雨，在路旁等待滴滴司机过来。她接到陌生电话，似乎是滴滴司机。 那边问：你现在在哪呢？ 她答：在 xxxxxx 院（家地址） 那边又问：那什么时候能过来呢？ 惊呆，为啥要我们过去？不是应该是司机过来吗？ 她答：我们就在这儿啊，为什么要过去 …………
后来发现，来电的其实是日料店老板，原本预定 6 点的座位，现在已经 6 点半了，老板打来问问是否留座 😂
我反正在旁边笑死，乌龙的传人。
堵车了一阵子，好不容易才抵达日料店，拉开日式拉门，熟悉的感觉顿又涌上心头，这是我们还是朋友的时候就经常光顾的老店。这家巷子店虽小，但客人总是很多，如果不预定，周末一定会排上很久的队。老板和员工总是客客气气，很礼貌地接待每一位顾客。好感度 +1
落座后发现，他们的扫码点单牌竟然是合金制的，不像大多数餐馆贴的塑料扫码牌。好感度 +1
自然是点了 J 小将喜爱的蒲烧鳗鱼，还是那么肥美呀~ 还点了芥末章鱼，酱辣鲜蛤，富贵卷。追加：加州卷和蒲烧鳗鱼 Double 蒲烧鳗鱼呢，真 8 错。
吃饱饱后去了附近某瑞买咖啡，然后移步炉石战场，又是扣分不断的一晚哦～
鏖战几回决定早点打道回府，外边小雨戚戚，不如回家放松自在玩猫猫。
希望你今天，和每天都过的愉快哦~ 爱你~ 😙</description>
    </item>
    
    <item>
      <title>Hugo | Custom Domain 自定义域名篇</title>
      <link>http://blog.nekolas.cafe/posts/hugo/hugo-custom-domain/</link>
      <pubDate>Sun, 09 Jan 2022 13:55:19 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/hugo-custom-domain/</guid>
      <description>你可以在网上买域名，也可以使用免费域名。
下面的文章将介绍如何在免费域名网站 freenom 购买并更换为 blog 域名。
1. 购买免费域名   进到 freenom 官网，注册一下，选择其中一个结账
  但这个网站有个小 bug，直接点 get it now 会显示 Not available。此时，你需要复制整个域名，比如 hugo666.tk 到搜索框，再一次 Check Availibility，接着点 Checkout。
  Period 选 12 months FREE, 完成结账，全程不需要银行卡，非常友好。
  点击导航栏的 Services - My Domains 在这里你能看到刚刚得到的域名，这个页面不要关，稍后需要继续设置。
  2. 域名解析 - DNSPod   打开 DNSPod，用微信注册一下账号，需要实名登记。完成以后点击顶上的 DNS，选择 DNS解析
  此时已经进到 我的域名 版面
   点击 添加域名 - 确认 这时会提示未正确设置 DNS 服务器   这时，需要复制这两个 正确的DNS服务器 地址。</description>
    </item>
    
    <item>
      <title>Hugo | 博客部署篇</title>
      <link>http://blog.nekolas.cafe/posts/hugo/hugo-githubpages/</link>
      <pubDate>Sat, 08 Jan 2022 13:55:19 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/hugo-githubpages/</guid>
      <description>使用 Netlify 托管 最近发现用 Netlify 部署静态网页对新手友好得多，真滴推荐用它部署你的博客或各种小项目！
可以参考我的另一篇文章 如何使用 Netlify 快速部署个人项目 
流程  首先需要把源码发布到你的 Github 仓库，步骤参考下文 如何部署到github-pages 👇 进入 Netlify，注册，创建新项目，选择 Add new site 选择从 Import an existing project - 连接 Github - 选择刚刚创建的博客项目仓库 Basic build settings:  Build command: hugo // 部署前先运行 hugo 指令 生成新的 Public 文件 Publish directory: public // 指定 public 文件夹为部署文件   点击 Deploy site 完成部署  使用 Github Pages 托管 Github Pages 是给啥 搭建篇 讲了如何通过安装和指令快速地建站、安装主题和写文章。这一篇将介绍如何托管自己的博客，让其他人可以访问。</description>
    </item>
    
    <item>
      <title>Chrismas 2021</title>
      <link>http://blog.nekolas.cafe/posts/life/chrismas-2021/</link>
      <pubDate>Mon, 27 Dec 2021 01:15:21 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/chrismas-2021/</guid>
      <description>呕吐大礼包 圣诞那天一早，咩咩就给我俩带来一份大礼：一摊呕吐物 🤮
我当时睡得迷迷糊糊，听见汪汪的呼喊，我才意识到这原来是真的。朦胧的眼睛睁开一开，看到黄色的一大坨呕吐物，正软趴趴地呆在汪汪枕头左边。我们急忙扯了纸巾把它弄走，味道酸臭，把汪汪逼到干呕，她后来回忆说，那玩意儿捧在手上，软乎乎的，还挺热乎 😂
Pizza Hut 从决定去必胜客到真正到达那里，大概花了 3 个小时。我们是下午 3 点才开始吃的午饭。说到 pizza 就很怀念在美国的第二年，每周五的 pizza day，总是点一份大的 peparoni pizza，和一份蔬菜的素 pizza，Rhoda 想逐渐成为 vegitarian，所以尽量会往那个方面饮食。除了两份 pizza，还会点两份意面和小食，大家都非常喜欢 pizza friday~
总之，中国必胜客非常本土，比如，著名的布满了菠萝的夏威夷披萨，我在美国从没见过这个口味。百胜真的是一家顶着洋快餐名头却异常本土化的一家餐饮公司了（从 K 记开始卖热干面和螺蛳粉等食物可见一斑）。
话说回来，保利这家必胜客，面积真的超级小，大概只摆了 6 桌这样，我倒是觉得这样面积的小餐馆有点可爱。我们三个要了一份夏威夷拼超级至尊，还有一份小食拼盘，一份蘑菇意面。
按摩椅与电影 吃饱了在保利逛逛，汪汪——文具的爱好者——买到了彩色水笔（并在几天后用紫色跟绿色画了一副非常骚的翘臀，哼哼）。然后觉得没啥逛的，就开始寻找按摩椅，一路找到了电影院里的按摩椅。
三人并排坐下，开始半小时的愉快按摩。被按得非常舒服以至于心中暗暗发誓，以后也要在家里给自己置办一张按摩椅……
既然到了电影院，我们打算顺便把《雄狮少年》看了。
《雄狮少年》是我认为少有的国产动画佳作。尽管它在 Pixar 和迪士尼面前不值一提，但它有自己的巨大优点。在迪士尼化的角色设定中，我们通常看到的是异常完美的大圆眼，头大身小的比例，而在《雄狮少年》中，人物设定是不被某些人喜欢的“细长眼”，背景设定是为某些人所耻的岭南乡下和打工的工地。国家的发展和“宣传”进步的新闻，是否让我们选择性地遗忘这类庞大且隐身人群的存在？
再谈容貌，人们是否看惯了滤镜和美颜相机，而遗忘了自己基因的特点？我和汪汪聊到外国动画作品，黑人角色嘴唇确实肥厚，鼻梁确实扁平，这些不过是与生俱来的人种特点罢了，黄种人眼睛较欧美人的小，面部扁平，也是人种的外貌特点，再具体到广东人，并不是说每一个广东人都长动画中的那样，但也无法否认存在长得像动画中的阿猫的广东人，我甚至觉得他非常“广东”。这些并不一定是刻意抹黑。觉得自己被丑化，觉得美术组刻意逢迎“白人爸爸”的观众，也许是个人自信心不足，容易被冒犯？又或许是自动涌入政治正确的庇护中？
最后，很喜欢电影中五条人和九连真人的插曲，广东味儿十足~
散步 看完电影，我们牵手走出电影院。商城外面有许多小孩，奔跑在人造雪花机吹拂的雪花中。人类真是什么都能造呢。虽然清楚这非常 artificial，但牵着她的手，看着她的微笑，同时雪花飘飘，一种浪漫的情感油然而生。
从这个商场转到另一个，买了一杯季节限定的抹茶红豆麦旋风分着吃，她抱怨说，香精味太多了，还是 K 记的可可冰淇淋味道纯正。我们喝着咖啡玩炉石，聊些有的没的，谈论周围的食客。这是我们一起度过的第二个圣诞节，巧的是去年也去了保利。我记得去年的那天，商城门前有一颗巨大的圣诞树，上面装点了粉紫色的小灯。我们推推搡搡，试图说服对方站到树面前，“我给你拍照！”。结果，我们轮流站在树跟前，局促地微笑，用旧手机记录了一个个傻气的笑容。
今年，没有圣诞树，也没有交换礼物，但我们仍在一起，感受彼此的温暖，这就让我觉得很幸福了。不过，还是希望明年的我们可以交换礼物，可以红红绿绿地装点我们的家。
粘土 回到家洗漱完毕，汪汪和米米捏起了粘土。米米捏了一个胖胖的福袋，汪汪捏了一颗圣诞树，还有可爱的汉堡夹打咩 🍔🐱 我立下 flag：明天捏 mini cooper 😄 （然后今天依然没动手……）</description>
    </item>
    
    <item>
      <title>Vue Proxy Getter Setter</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/vue-proxy-getter-setter/</link>
      <pubDate>Fri, 24 Dec 2021 13:41:50 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/vue-proxy-getter-setter/</guid>
      <description>初学 Vue 的朋友都知道，在vue实例的data中存放的数据，如果你修改它，修改后的内容也会同步映射到挂在的容器中。所以，Vue 是怎么做到的呢？ 偶然间从 Vue中的数据代理 中了解到，Vue 主要是调用了Object.defineProperty()方法实现的。
Object.defineProperty()  Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。 &amp;ndash; MDN
 直接增修data中的内容，或者使用Object.defineProperty增修，都可以达到类似的目的，但后者多了一些属性，以限制读写。
Object.defineProperty()中的一些属性    属性 描述 默认值     configurable 当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。 false   enumerable 当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。（意思是才可以遍历） false   value 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。 undefined   writable 当且仅当该属性的 writable 键值为 true 时，属性的值，也就是上面的 value，才能被赋值运算符 (en-US)改变。 false   get 属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值 undefined   set 属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。 undefined    Vue中的数据代理 Vue 通过 Object.</description>
    </item>
    
    <item>
      <title>End of 2021</title>
      <link>http://blog.nekolas.cafe/posts/life/end-of-2021/</link>
      <pubDate>Wed, 22 Dec 2021 17:14:19 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/end-of-2021/</guid>
      <description>关于我的 2021 一整年干了啥。
写了将近一万字（含隐藏） （惊 Σ(っ °Д °;)っ
 生活篇 ↓写了个人生活的小零碎片段 书影音篇 ↓推荐了一些个人觉得值得读的书 展望篇 ↓写了对生活的一些小小期待  内容颇长，故选择折叠起来，方便各位选择性阅读。
希望大家都有一个丰富、充满爱的 2022 (●&#39;◡&#39;●)
生活篇 2020 回国以来的20209 月 改装房间 浪了一阵子。先给自己的房间重新粉刷，把靠床的那面墙刷成了我喜欢的蓝色，在拼 xixi 批发家具：书桌，书柜垃圾桶…… 运来的都是一块块板子，我和我妈就根据说明书或网上的视频，一段段地打上螺丝刀，组装家具。因为坐在地上太久，也没有打孔电钻效率略低，整得我腰酸背痛。但，拼成的那短时间我特别开心，原本封印在几个纸箱里的书全都有了新家，我又花了大半个小时把书整整齐齐地摆好，心满意足。
10 月 云南旅游 大概国庆那阵子，一个朋友来柳州玩，我招待了几天。原本打算去涠洲岛，遇上坏天气无法上岛，便急忙商量另一个目的地——云南。大概因为云南比较近而我俩都没有去过。
云南气候宜人，四季如春，所以首府昆明也被称为春城。
第一站去了昆明 60 公里外的石林景区。风景就还好，里面有很多自然形成的石头（应该不是人工搬运的吧……）
第二站是西双版纳。乘小型飞机从昆明长水机场飞到嘎洒机场，夜晚才到。一下飞机，一场湿润温热的空气扑面而来。下榻在告庄景区内。
之后去的景点有：
 星光夜市：湄公河星光夜市位于 500 米开外，大金塔寺的背后，依傍湄公河。星光夜市不负亚洲第一夜市之名，上千个摊位在我们眼前摊开，犹如千颗星星闪耀，光彩熠熠（其实就是很多摆摊的夜市啦）。我花￥ 55 买了一条印尼风大象阔腿裤，做工挺差的…… 勐仑植物园：又叫中科院植物园，里面有好多好多好多认识不认识的植物，走马观花地看了一阵。打车回去花了￥ 100+，超贵，因为某人不听劝，早点走就可以赶上班车了 😅。晚餐吃了传统傣味晚餐：烤鸡，香茅鱼，臭菜煎蛋（一点不臭，中文学名特好听，叫羽叶金合欢），菠萝饭，豪啰嗦（竹叶粑粑），性价比很高。 原始森林公园：一座娱乐性质的森林公园。最精彩的部分是看到了孔雀齐飞~（虽然也是表演的一部分）。 曼听公园：曼听公园原为西双版纳傣王的御花园，曼听译成汉语是宫廷花园寨的意思。首先引入眼帘的是众多枝繁叶茂的植物，在植物的种类是，并不太逊色于植物园或原始森林公园。植被之中耸立着一座座有着悠久历史的宝塔和宫殿，在曼听，游客可以一览傣族王室文化、傣族民俗文化和佛教文化。享誉盛名的总佛寺便是坐落在曼听公园，佛像和宝殿庄严肃穆，就连不信神佛的俗人也不禁肃然起敬。除了总佛寺，公园里的放生亭，桥和白塔也让人印象深刻。  11 月 生日与手术 生日 生日那天请汪汪来我家玩，她超级 sweet 地做了一个蛋糕给我，天气热化成了一坨可爱又好笑的蛋糕，但非常好吃，她好棒。她把送我的生日礼物——黑胶唱机——带来我家，帮我安装，我手头正好有一张 Yo La Tengo 的 Extra Painful 可以播放（买来几年终于可以播放了 我泪）。我还记得因为没有音响，特地把客厅我爸的音响拆过来播放，我坐在椅子上，她坐在我房间的地毯上笑，听着 YLT 的温柔噪声吉他，真好啊。之后我在电视机上布置动森的家，花里胡哨地，然后汪汪来我岛上，跟小动物一起为我庆祝。</description>
    </item>
    
    <item>
      <title>Hugo Papermod主题 创建(侧边)目录</title>
      <link>http://blog.nekolas.cafe/posts/hugo/how-to-add-toc-on-a-hugo-post/</link>
      <pubDate>Mon, 20 Dec 2021 22:59:16 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/how-to-add-toc-on-a-hugo-post/</guid>
      <description>我在逛友邻的 blog 或是技术贴时发现，文章里若是有一个目录，就可以方便读者快速浏览自己看到的内容。在此之前，我尝试过 VS Code 的一些插件，但效果都不是特别理想，直到阅读了谌中钱 的一篇VSCode 插件 - Markdown Preview Enhanced 详解，才几乎完美地解决了在 md 文档中生成中文 TOC 的需求。
1. MPE 插件是什么  Markdown Preview Enhanced 是一款为 Atom 以及 Visual Studio Code 编辑器编写的超级强大的 Markdown 插件。 这款插件意在让你拥有飘逸的 Markdown 写作体验。
  官方文档地址：Markdown Preview Enhanced 安装：ctrl + shift + x 搜索 Markdown Preview Enhanced  2. MPE 有什么用 2.1 实时预览功能 写 markdown 文档或 码字时，可以随时查看实时生成的效果，非常方便~
使用方法：
 打开任意 markdown 文件，点击右键，选择MPE: 打开侧边预览 或是使用快捷键shift+k v  2.2 生成 TOC 树 我是打开预览后，发现右上角有三个按钮，其中第一个可以在 MPE 内部生成一个完美的 TOC，于是在网上搜索能否把它生成的 TOC“占为己用”，没想到真的可以(感觉挖到宝) 步骤：</description>
    </item>
    
    <item>
      <title>香酥有味：Aji惊奇脆片测评</title>
      <link>http://blog.nekolas.cafe/posts/life/aji-crispy-review/</link>
      <pubDate>Mon, 29 Nov 2021 23:44:00 +0000</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/life/aji-crispy-review/</guid>
      <description>
前阵子（终于）购入几包 Aji惊奇脆片，我读书的时候就已经加入收藏夹的零食，由于种种原因，现在才下手购买，发现真的不错吃！然后这几天购入了剩下的口味，接下来我就要测评这6种口味~包装 ⭐⭐⭐⭐
包装最值得称赞的部分就是密封条，开封后就算放一放，也不怕潮。（乐事的薯片们可以学一下吗） 包装设计方面，蔬菜味上印有蔬菜，芝士味上印有芝士，焦糖芥末味也是乖乖地印有芥末植物（山葵或辣根）和焦糖。 但是，我们神奇的优格洋葱味，除了印有奶白的yogurt液体，它的右侧还有一杯内容不明鸡尾酒杯，里面似乎是猕猴桃和草莓，这杯水果饮料跟洋葱似乎毫无关系吧…… (图： aji果子町专卖店)
口味 ⭐⭐⭐⭐
整体来说，每一包都被我们吃光光，味道还是很不错的，吃完后嘴巴也没有过于浓重的香精味残留。
*脆 惊奇crispy entry，诚不欺我，每一包的每一片都很脆，跟女票嘎吱嘎吱，不知不觉就吃完了一包。
*味 起士味 ⭐⭐⭐ 开吃前很期待芝士味，大概是作为愚蠢的消费者，只顾看包装上黄灿灿的芝士了吧。味道还行，不算经验，因为芝士并没有我想象的浓郁，算是比较平衡的口味。
蔬菜味 ⭐⭐⭐ 蔬菜味也是比较“家常”的蔬菜口味，类似于其他家咸口的蔬菜饼干，中规中矩。
泡菜味 ⭐⭐⭐⭐⭐ 强烈推荐泡菜口味，这个味道我们吃得简直停不下来。把脆片放入嘴里的瞬间，舌头接触到饼干表面，泡菜的鲜香味在嘴巴里扩散，香脆的口感在牙齿间回弹，和泡菜的咸味相得益彰。这款是这几款饼干里味道比较浓厚的。
蜂蜜黄油味 ⭐⭐ 作为一个新的口味，蜂蜜黄油给我们的感觉并不惊艳，只能让我觉得是为了迎合市场而仓促调的一种口味。入口几乎可以说是寡淡，尝不去特别确切的味道。
优格洋葱味 ⭐⭐⭐ 这款跟蔬菜味有点像，也是一种香葱小饼干的感觉，不错吃。 焦糖芥末味 ⭐⭐ 焦糖芥末比较特别。拆开袋子，一阵珍珠奶茶的味道飘了出来lol。刚入口，前调是略微呛人又挺迷人的芥末味，然后是焦糖的甜味。老师说，这样的搭配让我们觉得不是很满意，我更享受纯粹的芥末口味脆片而不是混杂了珍珠奶茶的甜味。但是在吃过几口后，又觉得这口味还是可以接受，印象比刚入口更好些，一位慢热型特殊选手。 价格 价格非常厚道，我们一次买4包，算上优惠券一包也就不到 7rmb，足足200g的脆片。
 总体评价 ⭐⭐⭐⭐
总体来说，Aji惊奇脆片作为性价比超高的好吃小零食，我们觉得不错买！ </description>
    </item>
    
    <item>
      <title>ES6数组与对象的解构赋值</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/variable-destructuring/</link>
      <pubDate>Sun, 28 Nov 2021 15:23:00 +0900</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/variable-destructuring/</guid>
      <description>在ES6以前，为变量赋值只能直接指定值，而ES6允许以变量解构的方式赋值。
那么，何为解构？
 按照一定模式，从数组和对象中提取值，对变量进行赋值。 —— （变量的解构赋值 - 阮一峰ES6入门）
 1. 数组解构 数组解构允许我们按照一一对应的关系从数组中提取然后将值赋值给变量：
let arr = [1, 2, 3]; let [a, b, c] = arr; console.log(a); console.log(b); console.log(b); //输入结果分别为 1, 2, 3 情况1：完全匹配 let [a, b, c] = [1, 2, 3];
情况2：部分匹配 let [x, y] = [1, 2, 3]; x // 1 y // 2  let [a, [b], d] = [1, [2, 3], 4]; a // 1 b // 2 d // 4 例子：codewar上有一道题：求一组正整数中的两个最小值的和。</description>
    </item>
    
    <item>
      <title>let &amp; const 对比 var 的新特性</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/let-n-const/</link>
      <pubDate>Fri, 26 Nov 2021 22:13:01 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/let-n-const/</guid>
      <description>let  let 关键字用于声明变量 用 let 声明的变量具有块级作用域，var 则没有，这可以阻止循环变量变成全局变量  var a = []; for (var i = 0; i &amp;lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 10 //i因为由var声明，所以是全局变量，经过循环后，i= 10，所以结果都为10 var a = []; for (let i = 0; i &amp;lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 6 //如果使用let，声明的变量仅在块级作用域内有效，最后输出的是 6  不存在变量提升：必须先声明，再使用 不能重复声明  let a = 0; let a; // Uncaught SyntaxError: Identifier &amp;#39;a&amp;#39; has already been declared  用 let 声明的变量具有暂时性死区(Temporal Dead Zone):   ES6 规定，let/const 命令会使区块形成封闭的作用域。若在声明之前使用变量，就会报错。</description>
    </item>
    
    <item>
      <title>Hugo | 使用Hugo搭建静态博客：Hugo搭建篇</title>
      <link>http://blog.nekolas.cafe/posts/hugo/hugo-site/</link>
      <pubDate>Sat, 20 Nov 2021 17:23:01 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/hugo-site/</guid>
      <description>1. Why Hugo? 之前使用的博客都是博客商（？）提供的框架，方便简单但定制化几乎为0。我想，既然学了些前端知识，不如从框架鼓捣一个新博客吧，记录平时因为懒惰而放弃书写的所见所闻所感，或就当作简单的备忘录也不错。
于是我把目光投向了Hexo, Wordpress, Jekyll, Hugo等平台，无意间发现 Hugo 的生成速度和自由度更高，构架的组织更完备，文档内容和相关主题也丰富。
 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
 官方文档：👇
  Hugo: The world’s fastest framework for building websites
  Hugo中文文档
  时代在朝着短视频和更快更短的内容 feed 疯狂前进。时代越快我越慢（慢慢鼓捣文字），大概算是一种 old fashion 式的对抗？
2. Hugo的安装和配置 Hugo-Quick Start 有详细的教程，这里简单整理一下：
2.1 Install 安装 三种安装方法任君挑选~
 二进制安装  到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe）
注意：因为hugo.exe并不是安装包，所以下载运行之后需要把Hugo添加到环境变量中。
具体步骤参考： 给J小将的写博客指南
Mac  使用 Homebrew安装：
brew install hugo使用 MacPorts 安装：
port install hugoWindows  使用 Chocolatey 安装：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.nekolas.cafe/gallery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.nekolas.cafe/gallery/</guid>
      <description>Main小猫日常Jane的画儿{{item.pname}}{{item.descriptions}}.spinner {display: flex;justify-content: center;align-items: center;width: 100%;}.lds-roller {display: inline-block;position: relative;width: 80px;height: 80px;}.lds-roller div {animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;transform-origin: 40px 40px;}.lds-roller div:after {content: &#39; &#39;;display: block;position: absolute;width: 7px;height: 7px;border-radius: 50%;background: #3d008d;margin: -4px 0 0 -4px;}.</description>
    </item>
    
    <item>
      <title>Jane&#39;s Works</title>
      <link>http://blog.nekolas.cafe/jane-works/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.nekolas.cafe/jane-works/</guid>
      <description>Main小猫日常Jane的画儿{{item.pname}}{{item.descriptions}}.spinner {display: flex;justify-content: center;align-items: center;width: 100%;}.lds-roller {display: inline-block;position: relative;width: 80px;height: 80px;}.lds-roller div {animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;transform-origin: 40px 40px;}.lds-roller div:after {content: &#39; &#39;;display: block;position: absolute;width: 7px;height: 7px;border-radius: 50%;background: #3d008d;margin: -4px 0 0 -4px;}.</description>
    </item>
    
    <item>
      <title>咩咩</title>
      <link>http://blog.nekolas.cafe/dame/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.nekolas.cafe/dame/</guid>
      <description>Main小猫日常Jane的画儿{{item.pname}}{{item.descriptions}}.spinner {display: flex;justify-content: center;align-items: center;width: 100%;}.lds-roller {display: inline-block;position: relative;width: 80px;height: 80px;}.lds-roller div {animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;transform-origin: 40px 40px;}.lds-roller div:after {content: &#39; &#39;;display: block;position: absolute;width: 7px;height: 7px;border-radius: 50%;background: #3d008d;margin: -4px 0 0 -4px;}.</description>
    </item>
    
    <item>
      <title>大声嚷嚷</title>
      <link>http://blog.nekolas.cafe/bb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.nekolas.cafe/bb/</guid>
      <description> -- --ispeakBber.init({el: &#39;#speak&#39;, // 容器选择器name: &#39;niqks&#39;, // 显示的昵称envId: &#39;bber-2g38ei06001dbc5f&#39;, // 环境idregion: &#39;ap-shanghai&#39;, // 腾讯云地址，默认为上海limit: 10, // 每次加载的条数，默认为5avatar: &#39;https://img3.doubanio.com/icon/ul152454124-10.jpg&#39;,// fromColor:&#39;rgb(245, 150, 170)&#39;, // 下方标签背景颜色 默认 rgb(245, 150, 170)loadingImg:&#39;https://blogpic-1308403500.cos.ap-shanghai.myqcloud.com/gif/kurby.gif&#39;, //kirby// &#39;https://smashinghub.com/wp-content/uploads/2014/08/cool-loading-animated-gif-1.gif&#39;, // cat// &#39;https://i.pinimg.com/originals/1c/13/f3/1c13f3fe7a6bba370007aea254e195e3.gif&#39;, // blueballloading的图片，示例值为默认值dbName:&#39;talks&#39; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。}).then(function() {// 哔哔加载完成后的回调函数，你可以写你自己的功能console.log(&#39;哔哔 加载完成&#39;)})</description>
    </item>
    
  </channel>
</rss>
