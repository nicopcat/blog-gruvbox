<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>打包 on Nekolas</title>
    <link>http://blog.nekolas.cafe/tags/%E6%89%93%E5%8C%85/</link>
    <description>Recent content in 打包 on Nekolas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2022 22:00:00 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/tags/%E6%89%93%E5%8C%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>打包利器Webpack和它基本配置</title>
      <link>http://blog.nekolas.cafe/posts/tech/others/webpack-basics/</link>
      <pubDate>Sat, 09 Jul 2022 22:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/others/webpack-basics/</guid>
      <description>Vue-cli用了一阵子，发现不太了解其内置的打包工具————webpack。这个神奇的小东西怎么配置的呢？来学习一下用法~
Webpack是一个静态资源打包工具，内建依赖项图。它除了打包，还可以帮我们做其他的事情。
为什么选择 webpack 想要理解为什么要使用 webpack，我们先回顾下历史，在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的。
在浏览器中运行 JavaScript 有两种方法。第一种方式，引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载太多脚本会导致网络瓶颈。第二种方式，使用一个包含所有项目代码的大型 .js 文件，但是这会导致作用域、文件大小、可读性和可维护性方面的问题。
安装 mkdir webpack-demo cd webpack-demo npm init -y npm install webpack webpack-cli --save-dev 基本 webpack的核心概念：
 Entry：打包入口，从入口开始构建依赖图。 Output：打包出口，在Webpack经过一系列处理后的最终输出结果。 Module：模块，在 Webpack里一切皆模块，一个模块对应着一个文件。Webpack会从配置的 Entry 开始递归找出所有依赖的模块。 Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。 Loader：模块转换器，用于把模块原内容按照需求转换成新内容。 Plugin：扩展插件，在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。  一个简单的配置例子：
const path = require(&amp;#39;path&amp;#39;) module.exports = { entry: &amp;#39;./main.js&amp;#39;, output: { path: path.resolve(__dirname, &amp;#39;dist&amp;#39;), filename: &amp;#39;main.[hash].bundle.js&amp;#39; } } Entry entry point指定打包的入口。默认入口就是&#39;./src/index.js&#39;，可以自行指定。
Output 打包生成bundle的出口。
使用output字段处理配置过程，如上例。
*注：引入的path模块，是Node.js 中的一个核心模块，用来操作文件地址。</description>
    </item>
    
  </channel>
</rss>
