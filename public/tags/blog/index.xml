<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Nic Tian</title>
    <link>http://blog.nekolas.cafe/tags/blog/</link>
    <description>Recent content in Blog on Nic Tian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Apr 2022 17:31:00 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>v-cloak: 隐藏未编译的raw template</title>
      <link>http://blog.nekolas.cafe/posts/tech/vue/v-cloak/</link>
      <pubDate>Sun, 17 Apr 2022 17:31:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/vue/v-cloak/</guid>
      <description>进入Gallery的时候，总会先显示很难看的 Vue 源代码的 mustache brackets。这是因为网速慢一点的话，先加载js文件，等到挂载结束才render页面。
于是 v-cloak 指令就排上用场了:
 Used to hide un-compiled template until it is ready.
 v-cloak 经常用来隐藏未编译的模板，直到渲染完成。
 v-cloak will remain on the element until the associated component instance is mounted. Combined with CSS rules such as [v-cloak] { display: none }, it can be used to hide the raw templates until the component is ready.
 v-cloak 将会作用在某个元素，直到完成挂载。结合CSS，如 [v-cloak] { display: none } 使用，可以用来隐藏还没准备好的模板。
例子：</description>
    </item>
    
    <item>
      <title>Hugo 和 PaperMod主题的小功能</title>
      <link>http://blog.nekolas.cafe/posts/hugo/tips-for-playing-hugo/</link>
      <pubDate>Mon, 14 Mar 2022 00:18:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/tips-for-playing-hugo/</guid>
      <description>1. 将hack字体CDN link 引入 head 最简单的方法是把hack字体的CDN地址引入head.
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css&amp;#34;&amp;gt; 接下来就是找到正确的地方。
在看某些教程的时候，我非常困惑，文件地址到底是根目录下，还是theme下面的文件？
我们最终的目的是把上面的link放到在index.html的&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;部分，所以需要找到post是在哪里render成head的。
我们发现theme/partials里面有一个head.html，确实可以修改这里，但我们最好不要修改原来的主题，否则很难维护，PaperMod主题在partials里配备了可供用户自定义的文件extend_head.html。
找到 根目录/themes/PaperMod/layouts/partials/extend_head.html，插入上面的link即可：
{{- /* Head custom content area start */ -}} &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css&amp;#34;&amp;gt; {{- /* Insert any custom code (web-analytics, resources, etc.) - it will appear in the&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; section of every page. */ -}} {{- /* Can be overwritten by partial with the same name in the global layouts. */ -}} {{- /* Head custom content area end */ -}} 引入成功，接下来需要找到相关的css文件修改。</description>
    </item>
    
    <item>
      <title>Hugo | 使用Hugo搭建静态博客：Hugo搭建篇</title>
      <link>http://blog.nekolas.cafe/posts/hugo/hugo-site/</link>
      <pubDate>Sat, 20 Nov 2021 17:23:01 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/hugo/hugo-site/</guid>
      <description>1. Why Hugo? 之前使用的博客都是博客商（？）提供的框架，方便简单但定制化几乎为0。我想，既然学了些前端知识，不如从框架鼓捣一个新博客吧，记录平时因为懒惰而放弃书写的所见所闻所感，或就当作简单的备忘录也不错。
于是我把目光投向了Hexo, Wordpress, Jekyll, Hugo等平台，无意间发现 Hugo 的生成速度和自由度更高，构架的组织更完备，文档内容和相关主题也丰富。
 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
 官方文档：👇
  Hugo: The world’s fastest framework for building websites
  Hugo中文文档
  时代在朝着短视频和更快更短的内容 feed 疯狂前进。时代越快我越慢（慢慢鼓捣文字），大概算是一种 old fashion 式的对抗？
2. Hugo的安装和配置 Hugo-Quick Start 有详细的教程，这里简单整理一下：
2.1 Install 安装 三种安装方法任君挑选~
 二进制安装  到 Hugo Releases 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe）
注意：因为hugo.exe并不是安装包，所以下载运行之后需要把Hugo添加到环境变量中。
具体步骤参考： 给J小将的写博客指南
Mac  使用 Homebrew安装：
brew install hugo 使用 MacPorts 安装：
port install hugo Windows  使用 Chocolatey 安装：</description>
    </item>
    
  </channel>
</rss>
