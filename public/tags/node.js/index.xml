<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Nekolas</title>
    <link>http://blog.nekolas.cafe/tags/node.js/</link>
    <description>Recent content in Node.js on Nekolas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2022 22:00:00 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>打包利器Webpack和它基本配置</title>
      <link>http://blog.nekolas.cafe/posts/tech/others/webpack-basics/</link>
      <pubDate>Sat, 09 Jul 2022 22:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/others/webpack-basics/</guid>
      <description>Vue-cli用了一阵子，发现不太了解其内置的打包工具————webpack。这个神奇的小东西怎么配置的呢？来学习一下用法~
Webpack是一个静态资源打包工具，内建依赖项图。它除了打包，还可以帮我们做其他的事情。
为什么选择 webpack 想要理解为什么要使用 webpack，我们先回顾下历史，在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的。
在浏览器中运行 JavaScript 有两种方法。第一种方式，引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载太多脚本会导致网络瓶颈。第二种方式，使用一个包含所有项目代码的大型 .js 文件，但是这会导致作用域、文件大小、可读性和可维护性方面的问题。
安装 mkdir webpack-demo cd webpack-demo npm init -y npm install webpack webpack-cli --save-dev 基本使用 webpack的核心概念：
 Entry：打包入口，从入口开始构建依赖图。 Output：打包出口，在Webpack经过一系列处理后的最终输出结果。 Module：模块，在 Webpack里一切皆模块，一个模块对应着一个文件。Webpack会从配置的 Entry 开始递归找出所有依赖的模块。 Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。 Loader：模块转换器，用于把模块原内容按照需求转换成新内容。 Plugin：扩展插件，在Webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。  一个简单的配置例子：
const path = require(&amp;#39;path&amp;#39;) module.exports = { entry: &amp;#39;./main.js&amp;#39;, output: { path: path.resolve(__dirname, &amp;#39;dist&amp;#39;), filename: &amp;#39;main.[hash].bundle.js&amp;#39; } } Entry entry point指定打包的入口。默认入口就是&#39;./src/index.js&#39;，可以自行指定。
Output 打包生成bundle的出口。
使用output字段处理配置过程，如上例。
*注：引入的path模块，是Node.js 中的一个核心模块，用来操作文件地址。</description>
    </item>
    
    <item>
      <title>NodeJS POST 请求</title>
      <link>http://blog.nekolas.cafe/posts/tech/others/node-js-post/</link>
      <pubDate>Fri, 08 Jul 2022 02:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/others/node-js-post/</guid>
      <description>好，继续学习Node.js的POST请求~
接下来的任务是创建一个用户登录表单，用户输入的用户名和密码数据会传到后端，服务器校验。校验通过之后，页面跳转。
文档结构：
|-- node_POST |-- server.js |-- html |-- 404-zh.html |-- 404.html |-- about-zh.html |-- about.html |-- index-zh.html |-- index.html |-- login-fail.html |-- login-success.html |-- login.html 表单 新建表单，绑定action和method：
&amp;lt;form action=&amp;#34;/process-login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; 当用户提交的时候，会触发action，地址跳转到&amp;quot;/process-login&amp;quot;。 后端可以通过监听这个url，然后对传过来的数据继续处理。
首先判断是否POST请求，然后判断url是否为上述地址：
if (url === &amp;#39;/process-login&amp;#39;) 前端如何给后端传递数据的 前端通过互联网将数据传给后端，这个数据被形象地成为stream（数据流）。
前端提交的data会转换成二进制数据，流向Node.js后端。在这个过程中，数据会被切割成好几部分，分批发送。
当数据分批抵达Node.js服务器后，数据会先被储存在一个缓冲区(Buffer)，之后Node.js会根据情况将数据从缓冲区传到程序中。
缓冲区可以控制数据流的速度，当数据流接收速度过快，数据就保存在缓冲区内；当速度较小，数据将暂时积攒在缓存中，攒够了程序才读取。典型的例子就是视频缓冲。
处理前端POST过来的数据 判断好确实是表单那边传过来的数据后，定义一个数组变量body：
if (url === &amp;#39;/process-login&amp;#39;) { let body = []; } 程序会分批读取缓冲区里传过来的数据，所有需要对数据进行监听，每传过来一次，就将数据push到body变量里：
if (url === &amp;#39;/process-login&amp;#39;) { let body = []; // 然后插入request监听器 监听data  request.</description>
    </item>
    
    <item>
      <title>Node.JS GET 请求</title>
      <link>http://blog.nekolas.cafe/posts/tech/others/node-js-get/</link>
      <pubDate>Wed, 06 Jul 2022 02:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/others/node-js-get/</guid>
      <description>resquest中的几个属性和方法： request.url: 返回请求页面的url
request.method: 识别请求方法
服务器想要知道请求页面的url以及方法，然后返回匹配的内容：
// 判断方法 if (method === &amp;#39;GET&amp;#39;) { if (url === &amp;#39;/&amp;#39;) { sendResponse(&amp;#39;index.html&amp;#39;, 200, response) } else if (url === &amp;#39;/about.html&amp;#39;) { sendResponse(&amp;#39;about.html&amp;#39;, 200, response) } else { sendResponse(&amp;#39;404.html&amp;#39;, 404, response) } } else { } }); 配置sendResponse函数 使用sendResponse()函数，根据请求html读取相应文件 通过end()发给用户
 sendResponse()函数有三个参数：filename, statusCode, response 导入fs(file system)模块  const fs = require(&amp;#39;fs&amp;#39;);  使用fs.readFile()函数，读取文件。它有两个参数：filename(路径)，callback 这个callback也有两个参数：error, data。error是错误信息，data是返回的内容  const sendResponse = (filename, statusCode, response) =&amp;gt; { fs.</description>
    </item>
    
    <item>
      <title>2分钟：创建一个简易Node.js服务器</title>
      <link>http://blog.nekolas.cafe/posts/tech/others/build-a-simple-node-js-server/</link>
      <pubDate>Wed, 06 Jul 2022 01:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/others/build-a-simple-node-js-server/</guid>
      <description>首先，下载 Node，输入node -v 查看当前Node版本。
然后创建一个 server.js 文件。
下面使用node.js自带http module创建服务器
// 使用require函数导入http，返回一个http object 储存到变量 const http = require(&amp;#39;http&amp;#39;); // 使用 createServer函数创建服务器 返回server object const server = http.createServer((request, response) =&amp;gt; { // request 可以获得前端发来的请求信息，如POST,请求头等  // response 给前端发送的信息  // 如response.end()给前端发送信息  // response.header()设置头部信息  // 这次只是简单地返回一句话 证明运行成功！  response.end(&amp;#39;wow You are running node.js&amp;#39;) }); // 监听来自前端的请求 使用server object里的listen()函数 // 三个参数：port，ip，callback const port = 3000; // 可自行定义 const ip = &amp;#39;127.0.0.1&amp;#39; // 本机ip  // 定义请求监听器（一个函数） server.</description>
    </item>
    
  </channel>
</rss>
