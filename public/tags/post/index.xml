<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>POST on Nekolas</title>
    <link>http://blog.nekolas.cafe/tags/post/</link>
    <description>Recent content in POST on Nekolas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jul 2022 02:00:00 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/tags/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NodeJS POST 请求</title>
      <link>http://blog.nekolas.cafe/posts/tech/others/node-js-post/</link>
      <pubDate>Fri, 08 Jul 2022 02:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/others/node-js-post/</guid>
      <description>好，继续学习Node.js的POST请求~
接下来的任务是创建一个用户登录表单，用户输入的用户名和密码数据会传到后端，服务器校验。校验通过之后，页面跳转。
文档结构：
|-- node_POST |-- server.js |-- html |-- 404-zh.html |-- 404.html |-- about-zh.html |-- about.html |-- index-zh.html |-- index.html |-- login-fail.html |-- login-success.html |-- login.html 表单 新建表单，绑定action和method：
&amp;lt;form action=&amp;#34;/process-login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt; 当用户提交的时候，会触发action，地址跳转到&amp;quot;/process-login&amp;quot;。 后端可以通过监听这个url，然后对传过来的数据继续处理。
首先判断是否POST请求，然后判断url是否为上述地址：
if (url === &amp;#39;/process-login&amp;#39;) 前端如何给后端传递数据的 前端通过互联网将数据传给后端，这个数据被形象地成为stream（数据流）。
前端提交的data会转换成二进制数据，流向Node.js后端。在这个过程中，数据会被切割成好几部分，分批发送。
当数据分批抵达Node.js服务器后，数据会先被储存在一个缓冲区(Buffer)，之后Node.js会根据情况将数据从缓冲区传到程序中。
缓冲区可以控制数据流的速度，当数据流接收速度过快，数据就保存在缓冲区内；当速度较小，数据将暂时积攒在缓存中，攒够了程序才读取。典型的例子就是视频缓冲。
处理前端POST过来的数据 判断好确实是表单那边传过来的数据后，定义一个数组变量body：
if (url === &amp;#39;/process-login&amp;#39;) { let body = []; } 程序会分批读取缓冲区里传过来的数据，所有需要对数据进行监听，每传过来一次，就将数据push到body变量里：
if (url === &amp;#39;/process-login&amp;#39;) { let body = []; // 然后插入request监听器 监听data  request.</description>
    </item>
    
  </channel>
</rss>
