<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asynchronous on Nic Tian</title>
    <link>http://blog.nekolas.cafe/tags/asynchronous/</link>
    <description>Recent content in Asynchronous on Nic Tian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jul 2022 13:00:00 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/tags/asynchronous/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用简单的方式理解JavaScript Promise</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/js-promise/</link>
      <pubDate>Sun, 03 Jul 2022 13:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/js-promise/</guid>
      <description>众所周知，在JavaScript的世界中，代码是单线程执行的。
这样设计的后果是容易阻塞随后的脚本运行。
下面的例子中，要等待doNotDoThis()打印完0 ~ 100000，才能接着打印console.log(&#39;Second log&#39;)，
function doNotDoThis() { for (let i = 0; i &amp;lt; 100000; i++) { console.log(i); } } // 立即打印 console.log(&amp;#39;First log&amp;#39;) // Don&amp;#39;t do this. doNotDoThis(); // 然后立即打印 console.log(&amp;#39;Second log&amp;#39;) 只要我们网络冲浪，访问不同的网址，就需要向各个服务器发送HTTP请求，然后等待返回数据。
但是呢，服务器不可能立即返回数据到客户端。
但如果按照单线程的运行方式，服务器返回数据之前，浏览器会处于一种卡死状态，这会让我们冲浪的体验极差。
于是就有了一些解决方案。
异步请求1.0 ———— 古早的Callback 我们可以给处理函数传递一个回调函数来处理回调结果。
我们常见的定时器setTimeout()就是回调函数：
const callball = () =&amp;gt; { console.log(&amp;#34;I&amp;#39;m a callback.&amp;#34;) } function isCallback() { setTimeout(callback, 2000) } isCallback() //2秒后打印： I&amp;#39;m a callback. 但要是回调函数非常复杂，嵌套好几个回调函数，就会造成回调地狱
// a函数执行b，b函数执行c，c函数打印最终结果 a(function (resultA) { b(resultA, function (resultB) { caches(resultB, function (resultC) { console.</description>
    </item>
    
  </channel>
</rss>
