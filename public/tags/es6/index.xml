<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ES6 on Nic Tian</title>
    <link>http://blog.nekolas.cafe/tags/es6/</link>
    <description>Recent content in ES6 on Nic Tian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jun 2022 15:00:00 +0800</lastBuildDate><atom:link href="http://blog.nekolas.cafe/tags/es6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何浅合并一下 JavaScript 对象（其实希望深拷贝）</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/js-object-merge/</link>
      <pubDate>Thu, 23 Jun 2022 15:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/js-object-merge/</guid>
      <description>由于业务需求，本人需要将两个对象进行合并。 对象层级较浅的情况，可以使用 ES6 ...语法，解构赋值，或 Object.assign() 快速合并；但对象里有子对象嵌套时，前两招就不好使了。要么使用第三方库，如 loadash 的 _.merge() 或 jQuery 的 $.extend() 方法，要么自己封装一个函数。
... 拷贝对象属性 使用扩展运算符 {...obj} 克隆或者拷贝对象的属性：
const obj1 = { name: &amp;#34;Nic&amp;#34; } const clonedObj = { ...obj1 } console.log(clonedObj) // { name: &amp;#34;Nic&amp;#34; } ... 合并对象 使用扩展运算符 {...obj} 合并两个对象，可以看到，扩展运算符内部的同名属性会被覆盖掉：
const obj1 = { a: 1 } const obj2 = { a: 2, b: 3 } const obj3 = { a: 3, b: 4, c: 5 } const obj = { .</description>
    </item>
    
    <item>
      <title>codewars练习</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/codewars/</link>
      <pubDate>Sat, 21 May 2022 14:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/codewars/</guid>
      <description>开个帖子记录一下解题和方法。
Break camelCase Details
 Complete the solution so that the function will break up camel casing, using a space between words.
 Example
&amp;quot;camelCasing&amp;quot; =&amp;gt; &amp;quot;camel Casing&amp;quot;&amp;quot;identifier&amp;quot; =&amp;gt; &amp;quot;identifier&amp;quot;&amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;quot;学到的 新知识
 正则表达式的 $1 - $9 正则表达式之先行断言 str.replace()的参数  复习
 replace() charCodeAt()  my solution 思路：用正则拿到大写，再用split(..)以大写字母为界切开，然后在头部加上大写字母，然后拼接在一起。
使用的方法: 正则 match(/[A-Z]/g), split, slice, concat, join, push &amp;hellip;
我真的想得太复杂了
function breakCamel(words) { if (words === &amp;#34;&amp;#34;) { return &amp;#39;&amp;#39; } else { // 得出这组字符串中大写字母 []  let uppercase = words.</description>
    </item>
    
    <item>
      <title>如何优雅地用 JS 创建包含 0 ~ n 的整数数组</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/js-create-number-array/</link>
      <pubDate>Sat, 23 Apr 2022 15:00:00 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/js-create-number-array/</guid>
      <description>Codewar 上有一题非常简单的题：
 写一个函数，给任意一个正整数 n，求和。
 Example:
2 -&amp;gt; 1 + 2 // output: 35 -&amp;gt; 1 + 2 + 3 + 4 + 5 // output: 15【小学生解法】
先用小学就学过等差数列的累加计算公式“( 首项 + 末项 ) * 项数 / 2”计算一下:
2 -&amp;gt; (1+2)* 2/2 = 3 ✔5 -&amp;gt; (1+5)* 5/2 = 15 ✔本小学生做对了！
【用 for 循环】
也很容易想到的是用 for 循环解题：
function sum(n) { let sum = 0; for (i = 0; i &amp;lt;= n; i++) { sum += i; } return sum; }  其实像这种累加的题目，感觉非常适合用 reduce 来做，于是问题变成了如何快速创建一个 0~n 的数组？</description>
    </item>
    
    <item>
      <title>ES6数组与对象的解构赋值</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/variable-destructuring/</link>
      <pubDate>Sun, 28 Nov 2021 15:23:00 +0900</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/variable-destructuring/</guid>
      <description>在ES6以前，为变量赋值只能直接指定值，而ES6允许以变量解构的方式赋值。
那么，何为解构？
 按照一定模式，从数组和对象中提取值，对变量进行赋值。 —— （变量的解构赋值 - 阮一峰ES6入门）
 1. 数组解构 数组解构允许我们按照一一对应的关系从数组中提取然后将值赋值给变量：
let arr = [1, 2, 3]; let [a, b, c] = arr; console.log(a); console.log(b); console.log(b); //输入结果分别为 1, 2, 3 情况1：完全匹配 let [a, b, c] = [1, 2, 3];
情况2：部分匹配 let [x, y] = [1, 2, 3]; x // 1 y // 2  let [a, [b], d] = [1, [2, 3], 4]; a // 1 b // 2 d // 4 例子：codewar上有一道题：求一组正整数中的两个最小值的和。</description>
    </item>
    
    <item>
      <title>let &amp; const 对比 var 的新特性</title>
      <link>http://blog.nekolas.cafe/posts/tech/javascript/let-n-const/</link>
      <pubDate>Fri, 26 Nov 2021 22:13:01 +0800</pubDate>
      
      <guid>http://blog.nekolas.cafe/posts/tech/javascript/let-n-const/</guid>
      <description>let  let 关键字用于声明变量 用 let 声明的变量具有块级作用域，var 则没有，这可以阻止循环变量变成全局变量  var a = []; for (var i = 0; i &amp;lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 10 //i因为由var声明，所以是全局变量，经过循环后，i= 10，所以结果都为10 var a = []; for (let i = 0; i &amp;lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 6 //如果使用let，声明的变量仅在块级作用域内有效，最后输出的是 6  不存在变量提升：必须先声明，再使用 不能重复声明  let a = 0; let a; // Uncaught SyntaxError: Identifier &amp;#39;a&amp;#39; has already been declared  用 let 声明的变量具有暂时性死区(Temporal Dead Zone):   ES6 规定，let/const 命令会使区块形成封闭的作用域。若在声明之前使用变量，就会报错。</description>
    </item>
    
  </channel>
</rss>
